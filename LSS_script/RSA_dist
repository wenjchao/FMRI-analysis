/home/karmey77/Desktop/DSN_AGE/BEH/7_DistanceDiffMat.tsv


require("RNifti")
require("Hmisc")
setwd("/home/karmey77/Desktop/DSN_AGE/MRI_Pilot")
stimDiffM = read.table("/home/karmey77/Desktop/DSN_AGE/BEH/7_DistanceDiffMat.tsv", header = T, sep = '\t')
stimDiffM = abs(stimDiffM)
check = c()
i = 1
grp = c("NII_Y","NII_O")[i]
grp
stimDiffM

IDseq = c(1:3)

for (i in 1:2)
{
  grp = c("NII_Y","NII_O")[i]
  
  for (j in IDseq)  # for (j in 13:length(list.files(file.path(paste0("./", grp)))))
  {
    # Directory Preperation
    subID = list.files(path = file.path(".", grp))[j]
    print(subID)
    sbj.dir = file.path(".", paste(grp, list.files(path = file.path(".", grp)),sep = "/")[j])
    beta_dir = file.path(sbj.dir,list.files(path = sbj.dir, pattern = "result"))
    beta.list  = list.files(path = beta_dir, pattern = "beta")

    check = c()
    
    token = 1
    for (k in 0:7)
    {
      index = c(c(5:11) + k*17)
      
      for (l in 1:7)
      {
        print(paste("Reading", paste("Trial", token, sep = '_')))
        assign(paste("Trial", token, sep = '_'),
               readNifti(paste(beta_dir ,beta.list[index[l]], sep = '/')))
        
        token = token + 1
      }
    }
    
    print(paste("Calculating RSA of", subID))
    dev.new(width = 5, height = 4)
    plot(NA, xlim = c(0,1), ylim = c(0,100), xlab = subID, ylab = "%", main = "Progress")
    total_progress = length(Trial_1[,1,1])*length(Trial_1[1,,1])*length(Trial_1[1,1,])
    progress_now = 0
    RSA = array(NA, dim = dim(Trial_1))
    
    for (x in 2:(length(Trial_1[,1,1])-2)) # X corrdinate
    {
      for (y in 2:(length(Trial_1[1,,1])-2)) # Y corrdinate
      {
        for (z in 2:(length(Trial_1[1,1,])-2)) # Z corrdinate
        {
          betaMat = matrix(NA,
                           length(as.vector(eval(as.name(paste0("Trial_",1)))[c((x-2):(x+2)),c((y-2):(y+2)),c((z-2):(z+2))])),
                           56)
          
          for (b in 1:56)
          {
            betaMat[,b] = as.vector(eval(as.name(paste0("Trial_",b)))[c((x-2):(x+2)),c((y-2):(y+2)),c((z-2):(z+2))])
          }
          
          # betaSim = rcorr(betaMat, type = "pearson")$r
          # betaDisSim  = (1-betaSim)/2
          
          betaDisSim  = dist(t(betaMat))
          
          # extract only half of the martix
          
          RSA[x,y,z] = cor(as.vector(as.matrix(betaDisSim[upper.tri(betaDisSim, diag = F)])),
                           as.vector(as.matrix(stimDiffM[upper.tri(stimDiffM, diag = F)])),
                           method = "pearson")
          
          progress_now = progress_now + 1
          percent = progress_now/total_progress*100
          rect(.4,percent,.6,percent, col = "2", border = NULL)
          
          if(!is.na(RSA[x,y,z]) && RSA[x,y,z] > 0)
          {
            check = append(check, c(x, y, z, RSA[x,y,z]))
          }
        }
      }
    }
    
    RSA.temp = RSA
    RSA.temp = asNifti(RSA.temp, reference = Trial_1)
    
    writeNifti(atanh(RSA.temp),
               paste0(beta_dir, "/RSAresult.nii"))
    print(paste(subID, "ends"))
  }
}
